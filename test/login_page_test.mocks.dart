// Mocks generated by Mockito 5.4.4 from annotations
// in lecture_code/test/login_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:ui' as _i8;

import 'package:lecture_code/features/auth/domain/usecases/register_usecase.dart'
    as _i3;
import 'package:lecture_code/features/auth/domain/usecases/signin_usecase.dart'
    as _i2;
import 'package:lecture_code/features/auth/domain/usecases/signout_usecase.dart'
    as _i4;
import 'package:lecture_code/features/auth/presentation/state_mgmt/auth_provider.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSignInUseCase_0 extends _i1.SmartFake implements _i2.SignInUseCase {
  _FakeSignInUseCase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRegisterUseCase_1 extends _i1.SmartFake
    implements _i3.RegisterUseCase {
  _FakeRegisterUseCase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSignOutUseCase_2 extends _i1.SmartFake
    implements _i4.SignOutUseCase {
  _FakeSignOutUseCase_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthenticationProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationProvider extends _i1.Mock
    implements _i5.AuthenticationProvider {
  MockAuthenticationProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoggedIn => (super.noSuchMethod(
        Invocation.getter(#isLoggedIn),
        returnValue: false,
      ) as bool);

  @override
  set isLoggedIn(bool? _isLoggedIn) => super.noSuchMethod(
        Invocation.setter(
          #isLoggedIn,
          _isLoggedIn,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isSignedUp => (super.noSuchMethod(
        Invocation.getter(#isSignedUp),
        returnValue: false,
      ) as bool);

  @override
  set isSignedUp(bool? _isSignedUp) => super.noSuchMethod(
        Invocation.setter(
          #isSignedUp,
          _isSignedUp,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get uid => (super.noSuchMethod(
        Invocation.getter(#uid),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#uid),
        ),
      ) as String);

  @override
  set uid(String? _uid) => super.noSuchMethod(
        Invocation.setter(
          #uid,
          _uid,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.SignInUseCase get signInUsecase => (super.noSuchMethod(
        Invocation.getter(#signInUsecase),
        returnValue: _FakeSignInUseCase_0(
          this,
          Invocation.getter(#signInUsecase),
        ),
      ) as _i2.SignInUseCase);

  @override
  _i3.RegisterUseCase get registerUsecase => (super.noSuchMethod(
        Invocation.getter(#registerUsecase),
        returnValue: _FakeRegisterUseCase_1(
          this,
          Invocation.getter(#registerUsecase),
        ),
      ) as _i3.RegisterUseCase);

  @override
  _i4.SignOutUseCase get signOutUsecase => (super.noSuchMethod(
        Invocation.getter(#signOutUsecase),
        returnValue: _FakeSignOutUseCase_2(
          this,
          Invocation.getter(#signOutUsecase),
        ),
      ) as _i4.SignOutUseCase);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i7.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> register(
    String? name,
    String? email,
    String? password,
    String? phoneNumber,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [
            name,
            email,
            password,
            phoneNumber,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
